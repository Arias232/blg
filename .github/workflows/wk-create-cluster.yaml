name: Create EKS Cluster on AWS

on:
  workflow_dispatch:
    inputs:
      aws_region:
        description: 'AWS Region to deploy to'
        required: true
        default: 'us-west-2'
        type: choice
        options:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - eu-west-1
          - eu-central-1

env:
  AWS_REGION: ${{ github.event.inputs.aws_region }}
  CLUSTER_NAME: K8S-Blue-Green-${{ github.run_id }}

permissions:
  id-token: write
  contents: read

jobs:
  Cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Install eksctl
        run: |
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
          eksctl version
      
      - name: List and cleanup failed EKS clusters
        run: |
          # Intentar obtener clusters existentes
          echo "Listing existing EKS clusters..."
          CLUSTERS=$(aws eks list-clusters --query "clusters" --output text || echo "")
          
          # Si hay clusters, intentar eliminarlos
          if [ -n "$CLUSTERS" ]; then
            for CLUSTER in $CLUSTERS; do
              echo "Found cluster: $CLUSTER"
              if [[ $CLUSTER == K8S-Blue-Green* ]]; then
                echo "Attempting to delete cluster: $CLUSTER"
                eksctl delete cluster --region ${{ env.AWS_REGION }} --name $CLUSTER --wait || true
              fi
            done
          else
            echo "No existing clusters found"
          fi
        continue-on-error: true
      
      - name: Cleanup CloudFormation stacks
        run: |
          # Listar stacks relacionados con eksctl
          echo "Listing eksctl CloudFormation stacks..."
          STACKS=$(aws cloudformation list-stacks --stack-status-filter CREATE_FAILED ROLLBACK_COMPLETE ROLLBACK_FAILED --query "StackSummaries[?contains(StackName, 'eksctl')].StackName" --output text || echo "")
          
          # Eliminar cada stack encontrado
          if [ -n "$STACKS" ]; then
            for STACK in $STACKS; do
              echo "Deleting stack $STACK..."
              aws cloudformation delete-stack --stack-name $STACK || true
              echo "Waiting for stack deletion..."
              sleep 30
            done
          else
            echo "No CloudFormation stacks to clean up"
          fi
        continue-on-error: true

  Create:
    needs: Cleanup
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Install eksctl
        run: |
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
          eksctl version
      
      - name: Create EKS cluster using eksctl
        run: |
          echo "Creating EKS cluster with dynamic name: ${{ env.CLUSTER_NAME }}"
          eksctl create cluster \
            --name ${{ env.CLUSTER_NAME }} \
            --region ${{ env.AWS_REGION }} \
            --version 1.29 \
            --node-type t3.medium \
            --nodes 2 \
            --nodes-min 1 \
            --nodes-max 3 \
            --managed
      
      - name: Verify cluster creation
        run: |
          echo "Verifying cluster creation..."
          eksctl get cluster --name=${{ env.CLUSTER_NAME }} --region=${{ env.AWS_REGION }}
          echo "Cluster verification completed."